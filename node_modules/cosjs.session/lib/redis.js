"use strict";
var redis = function(client) {
    this.client = client;
    this.prefix = "session";
    this.formatter = null;
};

module.exports = redis;

var redis_callback = function(err,ret){
    return err ? false : ret;
};



redis.prototype.hash = function(uid){
    return [this.prefix,uid].join('-');
};

redis.prototype.get = function (uid, key, callback) {
    if (!key) {
        hgetall.call(this, uid, callback);
    }
    else if (Array.isArray(key)) {
        hmget.call(this, uid,  key, callback);
    }
    else {
        hget.call(this, uid,  key, callback);
    }
}

redis.prototype.set = function (uid, key, val, callback) {
    var hash = this.hash(uid);
    if(typeof val == 'function'){
        callback = val;
    }
    else if(typeof callback != 'function'){
        callback = redis_callback;
    }
    if (typeof(key) === 'object') {
        var rows = {};
        for (var k in key) {
            rows[k] = typeof key[k] === 'object' ? JSON.stringify(key[k]) : key[k];
        }
        this.client.hmset(hash, rows, callback);
    }
    else {
        if (typeof(val) === 'object') {
            val = JSON.stringify(val);
        }
        this.client.hset(hash, key, val, callback);
    }
}

redis.prototype.del = function (uid, key, callback) {
    var hash = this.hash(uid);
    if(typeof callback != 'function'){
        callback = redis_callback;
    }
    if (key===null) {
        this.client.del(hash, callback);
    }
    else if (Array.isArray(key)) {
        key.forEach(function (k) {
            this.client.hdel(hash, k);
        });
        callback(null, key.length);
    }
    else {
        this.client.hdel(hash, key, callback);
    }
}

redis.prototype.incr = function (uid, key,val,callback) {
    var hash = this.hash(uid);
    this.client.hincrby(hash,key,val,callback);
}

redis.prototype.expire = function(uid, expire, callback){
    var hash = this.hash(uid);
    if(typeof callback != 'function'){
        callback = redis_callback;
    }
    var time = Date.now() / 1000;
    var cmd = expire >= time ? 'expireat':'expire';
    this.client[cmd](hash, expire, callback);
}


var hget = function (uid, key, callback) {
    var self = this;
    var hash = this.hash(uid);
    this.client.hget(hash, key, function (err, ret) {
        if (err) {
            return callback(err, ret);
        }
        if( self.formatter ){
            self.formatter(key,ret);
        }
        return callback(null, ret);
    });
}

var hmget = function (uid, key, callback) {
    var self = this;
    var hash = this.hash(uid);
    this.client.hmget(hash, key, function (err, ret) {
        if (err) {
            return callback(err, ret);
        }
        if(self.formatter){
            self.formatter(ret);
        }
        return callback(null, ret);
    });
}

var hgetall = function (uid, callback) {
    var self = this;
    var hash = this.hash(uid);
    this.client.hgetall(hash, function (err, ret) {
        if (err) {
            return callback(err, ret);
        }
        if(self.formatter){
            self.formatter(ret);
        }
        return callback(null, ret);
    })
}

