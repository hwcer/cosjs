"use strict";
const express    = require('express');
const session    = require('cosjs.session');
const library    = require('cosjs.library');
const loader    = library('loader');
const format    = library('format');

exports = module.exports = function httpServer(){

    var app = express();
    app.set('x-powered-by',false);

    app.static = function(route,root,option){
        app.use(route,express.static(root,option));
    }
    //启动SESSION
    app.session = function(route,option){
        app.use(route,session(option));
    }
    //创建一个服务器(路由)
    app.server = function(route,root,option){
        route = route||'*';
        var method = option['method'] || 'all';
        option['dataType'] = defineReqDataType(method,option['dataType']);
        var handle_call_prototype = { app : app, loader : loader(root), option : Object.freeze(option), };
        app[method](route, function (req, res, next) {
            handle_call.call(handle_call_prototype,req, res, next);
        });
        return handle_call_prototype.loader;
    };
    app.beforeHandleCall = function(route,func){
        app.use(route,function(req,res,next){
            req['beforeHandleCall'] = func;
            next();
        });
    };

    app.defineHandlePrototype = defineHandlePrototype;

    return app;
};


//handle加载器,/test/ , /test/index
function handle_call(req,res,next){
    var path = handle_subpath.call(this,req,res);
    var method = this.loader.parse(path);
    if( typeof method != 'function'  ){
        return next();
    }
    var usrAgent = handle_prototype(req,res,path,this.option);
    if(usrAgent.session && usrAgent.session.start){
        var session_start_callback_bind = session_start_callback.bind(usrAgent,method);
        usrAgent.session.start(session_start_callback_bind);
    }
    else{
        session_start_callback.call(usrAgent,method,null)
    }
};

function before_callback(method,err,ret){
    if(err){
        return this.error(err,ret);
    }
    else{
        var handle_callback = this.callback.bind(this);
        method.call(this, handle_callback);
    }
}
function session_start_callback(method,err,ret){
    if(err){
        this.error(err,ret);
    }
    else if(this.req.beforeHandleCall){
        var before_bind = before_callback.bind(this,method);
        this.req.beforeHandleCall.call(this,before_bind);
    }
    else {
        before_callback.call(this, method, null);
    }
}


function handle_subpath(req,res){
    var path,subpath = this.option.subpath || 0;
    if(typeof subpath == 'function'){
        path = subpath(req,res);
    }
    else if(Array.isArray(subpath)){
        path = req.path.substr(subpath[0],subpath[1]);
    }
    else if(subpath) {
        path = req.path.substr(subpath);
    }
    else{
        path = req.path;
    }
    return path;
}

function defineReqDataType(method,dataType){
    var ret;
    if(dataType){
        ret = Array.isArray(dataType) ? dataType : new Array(dataType);
    }
    if(method=='get'){
        ret =  ['query'];
    }
    else if(method=='post'){
        ret =  ['body'];
    }
    else{
        ret =  ['params','query','body'];
    }
    return ret;
}

function defineHandlePrototype(name,func){
    if(typeof name == 'object'){
        for(var k in name){
            defineHandlePrototype(k,name[k]);
        }
    }
    else{
        handle_prototype.prototype[name] = func;
    }
}

function handle_prototype(req,res,path,option){
    if (!(this instanceof handle_prototype)) {
        return new handle_prototype(req,res,path,option);
    }
    this.req = req;
    this.res = res;
    this.path = path;
    this.view = path;
    this.output = option['output'] || 'json';
    //this.render = res.render;
    this.session = null;
    if ( req.session && req.session instanceof (session.session)) {
        this.session = req.session;
    }
    Object.defineProperty(this,'option',{
        value: option,
        writable: false,
        enumerable: false,
        configurable: false,
    });

};

//获取参数
handle_prototype.prototype.get = function (key, type) {
    var val = null;
    for(var i in this.option.dataType){
        var k = this.option.dataType[i];
        var query = this.req[k]||{};
        if(key in query){
            val = query[key];
            break;
        }
    }
    if ( val!==null && type) {
        val = format(val, type);
    }
    return val;
};

handle_prototype.prototype.error = function(err,ret){
    this.callback(err,ret);
}

handle_prototype.prototype.success = function (ret){
    var arr = Array.from(arguments);
    arr.unshift(null);
    this.callback.apply(this,arr);
};

handle_prototype.prototype.location = function(path){
    this.res.location(path);
}
handle_prototype.prototype.redirect = function(url){
    this.res.redirect.apply(this.res,arguments);
}

//最终回调函数
handle_prototype.prototype.callback = function(err,ret){
    if(this.output == 'view'){
        return render.call(this,err,ret);
    }
    var msgPack = this.option.msgPack||false;
    if(typeof msgPack == 'function'){
        var data = msgPack.apply(this,arguments)
    }
    else{
        var data = {err:err,ret:ret||''};
    }
    //自定义错误码
    if(err && this.option.error && this.option.error[err] ){
        this.res.status(this.option.error[err]);
    }
    this.output == 'jsonp' ? this.res.jsonp(data) : this.res.send(data);
    this.res.end();
}

function render(err,ret){
    var self = this;
    var views = this.option.views || {};

    if(err){
        var view = 'error';
        var data = {err:err,ret:ret};
    }
    else{
        var view = this.view;
        var data = typeof ret == 'object' ? ret :{};
    }

    if(views[view]){
        view = views[view];
    }
    var len = view.length;
    var sub0 = view[0] == '/' ? 1 :0;
    var sub1 = view[len-1] =='/' ? (len - 1 - sub0) : (len - sub0);
    view = view.substr(sub0,sub1);
    this.res.render(view,data,function(){
        if(arguments[0]){
            self.res.send(arguments[0]);
        }
        else{
            self.res.send(arguments[1]);
        }
    });
}


