"use strict";
const cosjs     = require('cosjs');
const domain    = require('domain');
const express    = require('express');
const session    = require('cosjs.session');
const library    = require('cosjs.library');

exports = module.exports = function httpServer(){

    var app = express();
    app.set('x-powered-by',false);

    app.static = function(route,option){
        var root = option['root']||null;
        app.use(route,express.static(root,option));
    }
    //启动SESSION
    app.session = function(route,option){
        app.use(route,session(option));
    }
    //创建一个服务器(路由)//
    app.server = function(route,option){
        route = route||'*';
        var root = option['root']||null;
        var method = option['method'] || 'all';
        option['dataType'] = defineReqDataType(method,option['dataType']);
        var handle_call_prototype = { app : app, loader : library('loader')(root), option : Object.freeze(option), };
        app[method](route, function (req, res, next) {
            handle_call.call(handle_call_prototype,req, res, next);
        });
        return handle_call_prototype.loader;
    };

    app.defineHandlePrototype = defineHandlePrototype;

    return app;
};


//handle加载器,/test/ , /test/index
function handle_call(req,res,next){
    var path = handle_subpath.call(this,req,res);
    var method = this.loader.parse(path);
    if( typeof method != 'function'  ){
        return next();
    }
    var usrAgent = handle_prototype(req,res,path,this.option);
    var d = domain.create();
    d.on('error', function(err){
        console.log('error',err.stack);
        usrAgent.error('error',err.message || err.stack);
        cosjs.restart();
    });
    d.add(req);
    d.add(res);
    d.add(this.loader);

    d.run(() => {
        if(typeof this.option.before === 'function'){
            var session_start_bind = session_start.bind(usrAgent,method);
            this.option.before.call(usrAgent,session_start_bind);
        }
        else {
            session_start.call(usrAgent, method, null);
        }
    });
};

function session_start(method, err, ret){
    if(err){
        return this.callback(err,ret);
    }
    if(this.session && this.session.start){
        var session_finish_bind = session_finish.bind(this,method);
        this.session.start(session_finish_bind);
    }
    else{
        session_finish.call(this,method,null)
    }
}

function session_finish(method,err,ret){
    if(err){
        return this.callback(err,ret);
    }
    else{
        method.call(this,this.callback);
    }
}


function handle_subpath(req,res){
    var path,subpath = this.option.subpath || 0;
    if(typeof subpath == 'function'){
        path = subpath(req,res);
    }
    else if(Array.isArray(subpath)){
        path = req.path.substr(subpath[0],subpath[1]);
    }
    else if(subpath) {
        path = req.path.substr(subpath);
    }
    else{
        path = req.path;
    }
    if(path[0] != '/'){
        path = '/' + path;
    }
    return path;
}

function defineHandlePrototype(name,func){
    if(typeof name == 'object'){
        for(var k in name){
            defineHandlePrototype(k,name[k]);
        }
    }
    else{
        handle_prototype.prototype[name] = func;
    }
}
function defineReqDataType(method,dataType){
    var ret;
    if(dataType){
        ret = Array.isArray(dataType) ? dataType : new Array(dataType);
    }
    if(method=='get'){
        ret =  ['query'];
    }
    else if(method=='post'){
        ret =  ['body'];
    }
    else{
        ret =  ['params','query','body'];
    }
    return ret;
}


function handle_prototype(req,res,path,option){
    if (!(this instanceof handle_prototype)) {
        return new handle_prototype(req,res,path,option);
    }
    this.req = req;
    this.res = res;
    this.output = option['output'] || 'json';
    this.callback = handle_callback.bind(this);
    Object.defineProperty(this,'path',{ value: path, writable: false, enumerable: true, configurable: false, });
    Object.defineProperty(this,'option',{ value: option, writable: false, enumerable: true, configurable: false, });
    Object.defineProperty(this,'session',{ value: req.session||null, writable: false, enumerable: true, configurable: false, });
};

handle_prototype.prototype.error = function(){
    if(arguments.length == 0 ){
        var err = 'error',ret = 'unknown';
    }
    else if(arguments.length == 1 ){
        var err = 'error',ret = arguments[0];
    }
    else{
        var err = arguments[0],ret = arguments[1];
    }
    this.callback(err,ret);
    return false;
}

handle_prototype.prototype.success = function(){
    this.callback(null,arguments[0]);
    return true;
}

//获取参数
handle_prototype.prototype.get = function (key, type) {
    var val = null;
    for(var i in this.option.dataType){
        var k = this.option.dataType[i];
        var query = this.req[k]||{};
        if(key in query){
            val = query[key];
            break;
        }
    }
    if ( val!==null && type) {
        val = library('format')(val, type);
    }
    return val;
};


handle_prototype.prototype.render = function(data,view){
    var self = this;
    view = view || this.path;
    var len = view.length;
    var sub0 = view[0] == '/' ? 1 :0;
    var sub1 = view[len-1] =='/' ? (len - 1 - sub0) : (len - sub0);
    var path = view.substr(sub0,sub1);
    this.res.render(path,data,function(){
        if(arguments[0]){
            self.res.send(arguments[0]);
        }
        else{
            self.res.send(arguments[1]);
        }
        self.res.end();
    });
}


function handle_finish(err,ret,code){
    if(code){
        this.res.status(code);
    }
    this.output == 'jsonp' ? this.res.jsonp(ret) : this.res.send(ret);
    this.res.end();
}


function handle_callback(err,ret) {
    if(typeof this.option.finish == 'function'){
        var arr = Array.from(arguments);
        arr.push(handle_finish.bind(this));
        this.option.finish.apply(this,arr)
    }
    else{
        var data = {err:err,ret:ret||''};
        handle_finish.call(this,null,data);
    }
}