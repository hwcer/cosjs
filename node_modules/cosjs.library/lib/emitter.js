var library  = require('cosjs.library');
var EventEmitter = require('events').EventEmitter;

function RedisEmitter(opts,app) {
    if (!(this instanceof RedisEmitter)) {
        return new RedisEmitter(opts,app)
    }
    this.app = app || null;
    this.loader = opts.root ? library('loader')(opts.root) : null;
    this.prefix = opts.prefix || '_emit'
    this.pattern = opts.pattern ? true : false;


    Object.defineProperty(this, "redisEmitter",  { get : createRedisClient.bind(this,opts,'pub'), enumerable : true, configurable : true});
    Object.defineProperty(this, "redisReceiver", { get : createRedisClient.bind(this,opts,'sub'), enumerable : true, configurable : true});

    //加入所有事件
    if(this.loader){
        var trigger = this.loader.handle();
        for(var event of trigger){
            this.on(event, handle.bind(this,event));
        }
    }

    if(this.pattern) {
        this.redisReceiver.on('pmessage', (pattern, name, args)=> {
            pmessage.call(this, pattern, name, args);
        });
    }
    else{
        this.redisReceiver.on('message', (name, args)=>{
            message.call(this, name, args);
        });
    }
}

exports = module.exports = RedisEmitter;

require('util').inherits(RedisEmitter, EventEmitter);


RedisEmitter.prototype.emit = function (name) {
    if (name === 'newListener' || name === 'error') {
        EventEmitter.prototype.emit.apply(this, arguments)
    } else {
        this.publish.apply(this,arguments);
    }
}

RedisEmitter.prototype.publish = function() {
    var arr = Array.from(arguments);
    var name = arr.shift();
    this.redisEmitter.publish(this.prefix + name, JSON.stringify(arr));
}

RedisEmitter.prototype.on = RedisEmitter.prototype.addListener = function (name, listener) {
    EventEmitter.prototype.addListener.call(this, name, listener);
    if (name === 'error' || name === 'newListener') {
        return
    }
    var cmd = this.pattern ? 'psubscribe' : 'subscribe';
    this.redisReceiver[cmd](this.prefix + name);
}

RedisEmitter.prototype.subscribe = function (name) {
    var cmd = this.pattern ? 'psubscribe' : 'subscribe';
    this.redisReceiver[cmd](this.prefix + name);
}

//name, listener
RedisEmitter.prototype.unsubscribe = RedisEmitter.prototype.removeListener = function (name) {
    EventEmitter.prototype.removeListener.apply(this, arguments);
    if (this.listeners(name).length == 0) {
        var cmd = this.pattern ? 'punsubscribe' : 'unsubscribe';
        this.redisReceiver[cmd](this.prefix + name);
    }
}

RedisEmitter.prototype.removeAllListener = function (name) {
    EventEmitter.prototype.removeAllListener.apply(this, arguments);
    var cmd = this.pattern ? 'punsubscribe' : 'unsubscribe';
    this.redisReceiver[cmd](this.prefix + name);
}


RedisEmitter.prototype.end = RedisEmitter.prototype.quit = function () {
    if (this.hasOwnProperty('_pub')) this.redisEmitter.end();
    if (this.hasOwnProperty('_sub')) this.redisReceiver.end();
}

RedisEmitter.prototype.route = function(){
    return handle.apply(this,arguments);
}

function createRedisClient(opts,type) {
    var key = ['_',type].join('');
    if(this[key]){
        return this[key]
    }
    var redis = opts.redis || require('ioredis');
    if ( opts[type] && ( opts[type] instanceof redis || opts[type] instanceof (redis.Cluster) )   ) {
        this[key] = opts[type];
    } else {
        this[key] = createRedisConnect(redis,opts);
    }
    this[key].on('error', EventEmitter.prototype.emit.bind(this,'error') );
    return this[key];
}

function createRedisConnect(ioredis,options){
    if(Array.isArray(options)){
        var redis = new ioredis.Cluster(options);
    }
    else if(typeof options === 'object'){
        var redis = new ioredis(options);
    }
    else{
        var url = 'redis://' + options;
        var redis = new ioredis(url);
    }
    return redis;
};


function message(name,args) {
    if(!args){
        return;
    }
    args = library('json').parse(args)
    if(!args){
        return;
    }
    if (this.prefix.length) {
        name = name.substring(this.prefix.length);
    }
    args.unshift(name);
    //handle.apply(this,args)
    EventEmitter.prototype.emit.apply(this, args);
}

function pmessage(pattern,name,args) {
    if(!args){
        return;
    }
    args = library('json').parse(args)
    if(!args || !Array.isArray(args)){
        return;
    }
    if (this.prefix.length) {
        name = name.substring(this.prefix.length);
        pattern = pattern.substring(this.prefix.length);
    }
    args.unshift(name);
    //handle.apply(this,[].concat(args))
    if(pattern.indexOf('*') >=0){
        args.unshift(pattern);
    }
    EventEmitter.prototype.emit.apply(this, args);
}

function handle(name){
    if(!this.loader) {
        return ;
    }
    if(name.indexOf('/')<0){
        name = ['',name,''].join('/');
    }
    var arr = Array.prototype.slice.call(arguments,1);
    var method = this.loader.parse(name);
    if( typeof method != 'function'  ){
        return false;
    }
    method.apply(this, arr);
};