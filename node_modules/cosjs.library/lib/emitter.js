var EventEmitter = require('events').EventEmitter;
function RedisEmitter(opts) {
    if (!(this instanceof RedisEmitter)) {
        return new RedisEmitter(opts)
    }
    var self = this;
    this.prefix = opts.prefix || ''
    this.pattern = opts.pattern ? true : false;

    Object.defineProperty(this, "redisEmitter",  { get : createRedisClient.bind(self,opts,'pub'), enumerable : true, configurable : true});
    Object.defineProperty(this, "redisReceiver", { get : createRedisClient.bind(self,opts,'sub'), enumerable : true, configurable : true});

    if(this.pattern) {
        this.redisReceiver.on('pmessage', function (pattern, name, args) {
            pmessage.call(self, pattern, name, args);
        });
    }
    else{
        this.redisReceiver.on('message', function (name, args) {
            message.call(self, name, args);
        });
    }
}

exports = module.exports = RedisEmitter;

require('util').inherits(RedisEmitter, EventEmitter);


RedisEmitter.prototype.emit = function (name) {
    if (name === 'newListener' || name === 'error') {
        EventEmitter.prototype.emit.apply(this, arguments)
    } else {
        this.publish.apply(this,arguments);
    }
}

RedisEmitter.prototype.publish = function() {
    var arr = Array.from(arguments);
    var name = arr.shift();
    this.redisEmitter.publish(this.prefix + name, JSON.stringify(arr));
}


RedisEmitter.prototype.on = RedisEmitter.prototype.subscribe = RedisEmitter.prototype.addListener = function (name, listener) {
    EventEmitter.prototype.addListener.call(this, name, listener);
    if (name === 'error' || name === 'newListener') {
        return
    }
    var cmd = this.pattern ? 'psubscribe' : 'subscribe';
    this.redisReceiver[cmd](this.prefix + name);
}


RedisEmitter.prototype.unsubscribe = RedisEmitter.prototype.removeListener = function (name) {
    EventEmitter.prototype.removeListener.apply(this, arguments);
    if (this.listeners(name).length == 0) {
        var cmd = this.pattern ? 'punsubscribe' : 'unsubscribe';
        this.redisReceiver[cmd](this.prefix + name);
    }
}

RedisEmitter.prototype.removeAllListener = function (name) {
    EventEmitter.prototype.removeAllListener.apply(this, arguments);
    var cmd = this.pattern ? 'punsubscribe' : 'unsubscribe';
    this.redisReceiver[cmd](this.prefix + name);
}


RedisEmitter.prototype.end = RedisEmitter.prototype.quit = function () {
    if (this.hasOwnProperty('redisEmitter')) this.redisEmitter.end();
    if (this.hasOwnProperty('redisReceiver')) this.redisReceiver.end();
}


function createRedisClient(opts,type) {
    var key = ['_',type].join('');
    if(this[key]){
        return this[key]
    }
    var redis = opts.redis || require('redis');
    if (opts[type] instanceof (redis.RedisClient)) {
        this[key] = opts[type];
    } else {
        this[key] = redis.createClient(opts.port, opts.host, opts);
    }
    this[key].on('error', EventEmitter.prototype.emit.bind(this,'error') );
    return this[key];
}

function message(name,args) {
    if(!args){
        return;
    }
    args = JSON.parse(args)
    if (this.prefix.length) {
        name = name.substring(this.prefix.length);
    }
    args.unshift(name);
    EventEmitter.prototype.emit.apply(this, args);
}

function pmessage(pattern,name,args) {
    if(!args){
        return;
    }
    args = JSON.parse(args)
    if (this.prefix.length) {
        name = name.substring(this.prefix.length);
        pattern = pattern.substring(this.prefix.length);
    }
    if(pattern.indexOf('*') >=0){
        var arr = [pattern,name].concat(args);
    }
    else{
        var arr = [name].concat(args);
    }
    EventEmitter.prototype.emit.apply(this, arr);
}