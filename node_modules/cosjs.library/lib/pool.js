"use strict";
var random = require('./random');
var pool_connect  = {};

//添加一个服务器到连接池中
exports.set = function(key,options,connect,destroy){
    var dbPoll = pool_connect[key] =new pool(key,options,connect,destroy);
    for(let i=0;i<dbPoll._maxClient;i++){
        dbPoll.connect(function(){});
    }
    return dbPoll;
};
//请求连接
exports.get = exports.acquire = function(key){
    if( !pool_connect[key] ){
        return false;
    }else {
        return pool_connect[key]['acquire']();
    }
};
//动态创建连接
exports.connect = function(key,callback){
    if( !pool_connect[key] ){
        callback('error','pool key['+key+'] not exist');
    }else {
        pool_connect[key]['connect'](callback);
    }
};

/////////////////////////////////////////////////////////////////////////////////
exports.redis=function(key,options) {
    return exports.set( key, options, redis_connect, function(db){ db.quit() } );
};

exports.mongodb=function(key,options) {
    return exports.set(  key, options, mongodb_connect, function(db){  db.close() } );
};

/////////////////////////////////////////////////////////////////////////////////
function pool(key,options,connect,destroy){
    this.key = key;
    this.options = options||{};
    this._maxClient = this.options['maxClient'] || 1;
    this._databaseClient = [];
    this._databaseConnect = connect;
    this._databaseDestroy = destroy;
};

//请求分配一个现有连接
pool.prototype.acquire = function(){
    if( !this._databaseClient.length ){
        return false;
    }
    var i = random.roll(0,this._databaseClient.length - 1);
    return this._databaseClient[i];
};
//动态分配连接,更加安全
pool.prototype.connect = function(callback){
    if( this._databaseClient.length ){
        var i = random.roll(0,this._databaseClient.length - 1);
        callback(null,this._databaseClient[i]);
    }
    else{
        database_connect.call(this,callback);
    }
};


function database_connect(callback){
    var self = this;
    self._databaseConnect(self.options, function(err,db){
        if(err){
            return callback(err,db);
        }
        //高并发,已被其他用户创建
        if( self._databaseClient.length >= self._maxClient ){
            self._databaseDestroy(db);
        }
        else{
            self._databaseClient.push(db);
        }
        var i = random.roll(0,self._databaseClient.length - 1);
        callback(null,self._databaseClient[i]);
    });
};

function redis_connect(options,callback){
    if(typeof options === 'object'){
        var redis = require("redis").createClient(options);
    }
    else{
        var url = 'redis://' + options,opt = {};
        var redis = require("redis").createClient(url,opt);
    }
    redis.on('error',function(err){
        console.log('redis error',options,err);
    });
    callback(null,redis);
};




function mongodb_connect(options,callback){
    var encodeUrl = mongodb_url_encode(options);
    var mongodbUrl = 'mongodb://' + encodeUrl.url;
    var MongoClient = require('mongodb').MongoClient;
    MongoClient.connect(mongodbUrl, encodeUrl.opt, callback)
};

function mongodb_url_encode(config){
    var url,arg = [],opt={};
    if(typeof config !== 'object'){
        url = config;
        return {url:url,opt:opt};
    }
    if(config['url']){
        url = Array.isArray(config['url']) ? config['url'].join(','):config['url'];
    }
    else{
        url = [config['host'],config['port']||27017].join(':');
    }
    if(config['database']){
        url +=  ('/'+ config['database']);
    }
    if(config['username'] && config['password']){
        url = config['username'] + ':'+ config['password'] + '@' + url;
    }


    var keys = ['url','host','port','database','username','password'];
    for(var k in config){
        var v = config[k],t = typeof v,i = keys.indexOf(k);
        if( i < 0 && (t ==='string' || t === 'number') ){
            arg.push(k+'='+v);
        }
        else if( i < 0 ){
            opt[k] = v;
        }
    }
    if(arg.length>0){
        url += ('?' + arg.join('&'));
    }
    return {url:url,opt:opt};
};