"use strict";
var random = require('./random');
var pool_connect  = {};

//添加一个服务器到连接池中
exports.set = function(key,config,options,connect,destroy){
    var dbPoll = pool_connect[key] =new pool(key,config,options,connect,destroy);
    for(let i=0;i<dbPoll._maxClient;i++){
        dbPoll.connect(function(){});
    }
    return dbPoll;
};
//请求连接
exports.acquire = function(key){
    if( !pool_connect[key] ){
        return false;
    }else {
        return pool_connect[key]['acquire']();
    }
};
//动态创建连接
exports.connect = function(key,callback){
    if( !pool_connect[key] ){
        callback('error','pool key['+key+'] not exist');
    }else {
        pool_connect[key]['connect'](callback);
    }
};

/////////////////////////////////////////////////////////////////////////////////
exports.redis=function(key,config,options) {
    return exports.set( key, config, options, redis_connect, function(db){ db.quit() } );
};

exports.mongodb=function(key,config,options) {
    return exports.set(  key, config, options, mongodb_connect, function(db){  db.close() } );
};

/////////////////////////////////////////////////////////////////////////////////
var pool = function(key,config,options,connect,destroy){
    this.key = key;
    this.config = config;
    this.options = options||{};
    this._maxClient = this.options['maxClient'] || 1;
    this._databaseClient = [];
    this._databaseConnect = connect;
    this._databaseDestroy = destroy;
};

//请求分配一个现有连接
pool.prototype.acquire = function(){
    if( !this._databaseClient.length ){
        return false;
    }
    var i = random.roll(0,this._databaseClient.length - 1);
    return this._databaseClient[i];
};
//动态分配连接,更加安全
pool.prototype.connect = function(callback){
    if( this._databaseClient.length ){
        var i = random.roll(0,this._databaseClient.length - 1);
        callback(null,this._databaseClient[i]);
    }
    else{
        database_connect.call(this,callback);
    }
};

var redis_connect = function(config,options,callback){
    var url = 'redis://' + database_protocol(config);
    var redis = require("redis").createClient(url,options);
    redis.on('error',function(err){
        console.log('redis['+url+'] connect error,code:'+err.code);
    });
    callback(null,redis);
};

var mongodb_connect = function(config,options,callback){
    var url = 'mongodb://' + database_protocol(config);
    var MongoClient = require('mongodb').MongoClient;
    MongoClient.connect(url, options, callback)
};

var database_connect = function(callback){
    var self = this;
    return self._databaseConnect(self.config, self.options, function(err,db){
        if(err){
            return callback(err,db);
        }
        //高并发,已被其他用户创建
        if( self._databaseClient.length >= self._maxClient ){
            self._databaseDestroy(db);
        }
        else{
            self._databaseClient.push(db);
        }
        var i = random.roll(0,self._databaseClient.length - 1);
        callback(null,self._databaseClient[i]);
    });
};

var database_protocol = function(config){
    var str;
    if(typeof config == 'object'){
        str = Array.isArray(config['host']) ? config['host'].join(','):config['host'];
        if(config['port']){
            str += ':' + config['port'];
        }
        if(config['username'] && config['password']){
            str = config['username'] + ':'+ config['password'] + '@' + str;
        }
    }
    else{
        str = config;
    }
    return str;
};