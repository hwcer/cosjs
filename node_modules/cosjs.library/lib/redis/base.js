"use strict"
const pool = require('../pool');
exports = module.exports = class redis_base{
    constructor(RedisKey,PrefixChar) {
        this._RedisConn  = redis_client(RedisKey);
        this._RedisMulti = null;
        this._PrefixChar = Array.isArray(PrefixChar) ? PrefixChar.join('|') : PrefixChar;
        this._PrefixSplit = '|';
    }
    
    connect(read){
        if(read){
            return this._RedisConn;
        }
        else {
            return this._RedisMulti || this._RedisConn;
        }
    }
    error(err,callback){
        return callback('RedisError',err.message);
    }

    isEmpty(x){
        if(x===null || x===undefined || x===false || x===''){
            return true;
        }
        else{
            return false;
        }
    }
    save(callback) {
        var self = this;
        callback = callback || this.callback;
        if(!this._RedisMulti){
            return callback('redisErr','use exec but multi empty');
        }
        this._RedisMulti.exec(function (err,ret) {
            self._RedisMulti = null;
            return callback(err,ret);
        });
    }

    multi(){
        if(!this._RedisMulti){
            this._RedisMulti = this._RedisConn.multi();
        }
        return this._RedisMulti;
    }

    del(key, callback) {
        callback = callback || this.callback;
        var hash  = this.hash(key);
        var redis = this.connect();
        redis.DEL(hash, callback);
    }

    expire(id,expire,callback){
        callback = callback || this.callback;
        var hash = this.hash(id);
        var redis = this.connect();
        var time = Date.now() / 1000;
        var cmd = expire >= time ? 'expireat':'expire';
        redis[cmd](hash, expire, callback);
    }

    exist(id,callback){
        var hash = this.hash(id);
        var redis = this.connect(true);
        redis.exists(hash, callback);
    }


    hash(id) {
        var self = this,arr = [],key=[];
        for(let k of arguments){
            Array.isArray(k) ? arr=arr.concat(k) : arr.push(k);
        }
        if(arr.length === 0){
            throw new Error('redis id empty');
        }
        arr.forEach(function(k){
            key.push([self._PrefixChar,k].join(self._PrefixSplit));
        });
        return key.length == 1 ? key[0] : key;
    }

    callback(err,ret){
        return err ? false : ret;
    }
}


function redis_client(key) {
    return typeof key == 'object' ? key : pool.acquire(key);
}