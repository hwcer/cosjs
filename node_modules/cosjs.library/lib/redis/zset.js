"use strict"
const base = require('./base');

exports = module.exports = class redis_zset extends base{

    constructor(RedisKey,PrefixChar) {
        super(RedisKey,PrefixChar);
        this.order = 'desc';
    }

    //获取个人排名,-1:未上榜，0：开始
    get(name, key, callback) {
        var hash  = this.hash(name);
        var redis = this.conn(true);
        if(this.order == 'desc'){
            redis.zrevrank(hash, key, callback);
        }
        else{
            redis.zrank(hash, key, callback);
        }
    }
    //设置SCORE
    set(name, key, val, callback) {
        callback = callback||this.callback;
        var hash  = this.hash(name);
        var redis = this.conn();
        redis.zadd(hash, val,key, callback);
    }
    //删除排名
    del(name,key, callback) {
        if(typeof key == 'function'){
            callback = arguments[1];
            key = null;
        }
        else{
            callback = callback || this.callback;
        }
        var hash  = this.hash(name);
        var redis = this.conn();
        if(key===null){
            redis.DEL(hash, callback);
        }
        else{
            redis.ZREM(hash, key, callback);
        }
    }
    //获取值
    val(name,key, callback) {
        var hash  = this.hash(name);
        var redis = this.conn(true);
        redis.zscore(hash, key, callback);
    }
    //递增值
    incr(name,key,val,callback) {
        callback = callback||this.callback;
        var hash  = this.hash(name);
        var redis = this.conn();
        redis.zincrby(hash, val,key,callback);
    }
    size(name,callback){
        var hash  = this.hash(name);
        var redis = this.conn(true);
        redis.zcard(hash, callback);
    }
    //按名次分段获取
    range(name,start,end,WITHSCORES,callback) {
        var redis = this.conn(true);
        var arr = Array.from(arguments);
        arr[0] = this.hash(arr[0]);
        if(arr[3] && typeof arr[3] != 'function'){
            arr[3] == 'WITHSCORES';
        }

        if(this.order == 'desc' ){
            redis.zrevrange.apply(redis, arr);
        }
        else{
            redis.zrange.apply(redis, arr);
        }
    }
    //按积分分段获取,ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]
    rangeByScore(name,min,max,WITHSCORES,limit, offset, count,callback) {
        var redis = this.conn(true);
        var arr = Array.from(arguments);
        arr[0] = this.hash(arr[0]);
        if(arr[3] && typeof arr[3] != 'function'){
            arr[3] == 'WITHSCORES';
        }
        if(this.order == 'desc' ){
            redis.zrevrangebyscore.apply(redis,arr);
        }
        else{
            redis.zrangebyscore.apply(redis,arr);
        }
    }


};
