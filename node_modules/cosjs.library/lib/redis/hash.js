"use strict"
// 批量删除,非原子操作,为保证数据一致性请开启通道
const base = require('./base');
const format = require('../format');
exports = module.exports = class redis_hash extends base{

    constructor(RedisKey,PrefixChar,FormatOpts) {
        super(RedisKey,PrefixChar);
        this._FormatOpts = FormatOpts;
    }

    get(id, key, callback) {
        if ( this.isEmpty(key) ) {
            hgetall.call(this,id, callback);
        }
        else if (Array.isArray(key)) {
            hmget.call(this, id, key, callback);
        }
        else {
            hget.call(this,id, key, callback);
        }
    }

    set(ids, key) {
        var val,next = 2,callback = this.callback;
        if(typeof arguments[next] !== 'function'){
            val = arguments[next];
            next++;
        }

        if(typeof arguments[next] === 'function') {
            callback = arguments[next];
        }
        if(Array.isArray(ids)){
            for(var id of ids){
                this.set(id,key,val);
            }
            return callback(null, ids.length);
        }
        var hash = this.hash(ids);
        var redis = this.connect();
        if (typeof(key) === 'object') {
            var rows = {};
            for (var k in key) {
                rows[k] = typeof key[k] === 'object' ? toString(key[k]) : key[k];
            }
            redis.HMSET(hash, rows, callback);
        }
        else {
            if (typeof(val) === 'object') {
                val = toString(val);
            }
            redis.hset(hash, key, val, callback);
        }
    }
    // key,callback
    del(ids){
        var next = 1,key,callback = this.callback;

        if(typeof arguments[next] !== 'function'){
            key = arguments[next];
            next ++;
        }
        if(typeof arguments[next] === 'function'){
            callback = arguments[next];
            next ++;
        }
        if(Array.isArray(ids)){
            for(var id of ids){
                this.del(id,key);
            }
            return callback(null, ids.length);
        }
        else if( this.isEmpty(key) ){
            return super.del(ids,callback);
        }
        var hash = this.hash(ids);
        var redis = this.connect();
        if (Array.isArray(key)) {
            for(var k of key){
                redis.hdel(hash, k);
            }
            callback(null, key.length);
        }
        else {
            redis.hdel(hash, key, callback);
        }
    }

    incr(ids,key,val,callback) {
        callback = callback || this.callback;
        if(Array.isArray(ids)){
            for(var id of ids){
                this.incr(id,key,val);
            }
            callback(null,ids.length);
        }
        else{
            var hash = this.hash(ids);
            var redis = this.connect();
            redis.hincrby(hash,key,val,callback);
        }
    }
    //id,[key],callback
    exist(id,key,callback){
        var next = 1,key=null,callback;
        if(typeof arguments[next] != 'function'){
            key = arguments[next];
            next ++;
        }
        callback = arguments[next];
        var hash = this.hash(id);
        var redis = this.connect(true);
        if (arguments.length > 2) {
            redis.hexists(hash, key, callback);
        }
        else {
            redis.exists(hash, callback);
        }
    }

}



function hget(id, key, callback) {
    var hash = this.hash(id);
    var redis = this.connect(true);
    redis.hget(hash, key, (err, ret) =>{
        if (err || ret === null) {
            return callback(err, ret);
        }
        if(this._FormatOpts && this._FormatOpts[key]){
            var valType = typeof this._FormatOpts === 'object' ? this._FormatOpts[key]['type'] : this._FormatOpts;
            var val = format.parse(ret, valType)
        }
        else{
            var val = ret;
        }
        return callback(null, val );
        
    });
}

function hmget(id, keys, callback) {
    var hash = this.hash(id);
    var redis = this.connect(true);
    redis.hmget(hash, keys, (err, ret)=> {
        if (err) {
            return callback(err, ret);
        }
        var data = {};
        for (let i in keys) {
            let k = keys[i];
            if(ret[i] !== null ){
                data[k] = ret[i];
            }
        }
        if(Object.keys(data).length == 0){
            return callback(null, null);
        }
        if(this._FormatOpts){
            format(data,this._FormatOpts);
        }
        return callback(false, data);
    });
}

function hgetall(id, callback) {
    var hash = this.hash(id);
    var redis = this.connect(true);
    redis.hgetall(hash, (err, ret)=>{
        if (err || ret===null) {
            return callback(err, ret);
        }
        if(this._FormatOpts){
            format(ret,this._FormatOpts,true);
        }
        return callback(false, ret);
    })
}


function toString(val){
    if( typeof val.toJSON === 'function'){
        return val.toJSON();
    }
    else if(val && typeof val === 'object'){
        return JSON.stringify(val);
    }
    else{
        return val===null?'':val;
    }
}