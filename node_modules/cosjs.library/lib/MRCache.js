"use strict"

const cosjs_redis   = require('./redis/hash');
const cosjs_mongodb = require('./mongodb');


exports = module.exports = class MRCache {

    constructor(Mongodb,Redis,CollName,PrefixChar,FormatOpt) {
        this.expire  = 86400;
        this.redis   = new cosjs_redis(Redis,[PrefixChar || 'cache',CollName],FormatOpt );
        this.mongodb = new cosjs_mongodb(Mongodb,CollName);
    }

    get(id) {
        var self = this,key = null,next = 1,callback=this.redis.callback;
        if(typeof arguments[next] !== 'function'){
            key = arguments[next];
            next++;
        }
        if(typeof arguments[next] === 'function') {
            callback = arguments[next]
        }
        if(id===null || Array.isArray(id)){
            return this.mongodb.get.call(this.mongodb,id,key,callback);
        }
        this.redis.get(id,key,function(err,ret){
            if(err){
                return callback(err,ret);
            }
            else if(!ret){
                getDataFromMongodb.call(self,id,key,callback);
            }
            else{
                return callback(null,ret);
            }
        });
    }
//id,key,[val,callback]
    set(id,key) {
        var self = this,val = null,next = 2,callback=this.redis.callback;
        if(typeof arguments[next] !== 'function'){
            val = arguments[next];
            next++;
        }
        if(typeof arguments[next] === 'function') {
            callback = arguments[next]
        }
        var result = function(err,ret){
            if(!err){
                self.mongodb.set(id,key,val,callback);
            }
            else {
                callback(err, ret);
            }
        }
        this.redis.exists(id,function(err,ret){
            if(err || !ret){
                self.mongodb.set(id,key,val,callback);
            }
            else {
                self.redis.set(id, key, val, result);
            }
        })

    }


    del(id) {
        var self = this,key = null,next = 1,callback=this.redis.callback;
        if(typeof arguments[next] !== 'function'){
            key = arguments[next];
            next++;
        }
        if(typeof arguments[next] === 'function') {
            callback = arguments[next]
        }
        var DBDelResult = function(err,ret){
            if(err){
                return callback(err,ret);
            }
            self.redis.del(id,key,callback);
        }
        if(key){
            this.mongodb.remove(id,DBDelResult);
        }
        else{
            this.mongodb.unset(id,key,DBDelResult);
        }
    }
    //data,[option],callback,[ErrorReNum]
    add(data) {
        var self = this,callback = arguments[1] || this.redis.callback;
        if(!data['_id']){
            data['_id'] = this.mongodb.ObjectID();
        }
        var id = data['_id'];
        this.mongodb.insert(data,function(err,ret){
            if(!err){
                addDataToRedis.call(self,id,data);
            }
            callback(err,ret);
        });
    }


    incr(id, key) {
        var self = this,val = null,next = 2,callback=this.redis.callback;
        if(typeof arguments[next] !== 'function'){
            val = arguments[next];
            next++;
        }
        if(typeof arguments[next] === 'function') {
            callback = arguments[next]
        }
        var result = function(err,ret){
            if(!err){
                self.mongodb.incr(id,key,val,callback);
            }
            else {
                callback(err, ret);
            }
        }
        this.redis.exists(id,function(err,ret){
            if(err || !ret){
                self.mongodb.incr(id,key,val,callback);
            }
            else {
                self.redis.incr(id, key, val, result);
            }
        })
    }

    page(){
        return this.mongodb.page.apply(this.mongodb,arguments);
    }
}

function addDataToRedis(id,key,val) {
    var self = this;
    this.redis.set(id,key,val,function(err,ret){
        if(!err && self.expire){
            self.redis.expire(id,self.expire);
        }
    });
}

function getDataFromMongodb(id,keys,callback){
    var self = this;
    this.mongodb.get(id,null,function(err,ret){
        callback(err,ret);
        if(!err && ret){
            addDataToRedis.call(self,id,ret);
        }
    });
}

