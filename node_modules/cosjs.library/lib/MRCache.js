"use strict"
const cosjs_task    = require('./btask');
const cosjs_redis   = require('./redis/hash');
const cosjs_mongodb = require('./mongodb');


exports = module.exports = class MRCache {

    constructor(Mongodb,Redis,CollName,PrefixChar,FormatOpt) {
        this.limit   = 10;       //批量get时,当数量大于limit时 直接从MONGODB中读取
        this.expire  = 86400;
        this.redis   = new cosjs_redis(Redis,PrefixChar || CollName,FormatOpt );
        this.mongodb = new cosjs_mongodb(Mongodb,CollName);
    }
    
    save(callback){
        this.redis.save((err,ret)=>{
            if(err){
                return callback(err,ret);
            }
            this.mongodb.save(callback);
        });
    }
    multi(){
        this.redis.multi();
        this.mongodb.multi();
    }
    
    get(id) {
        var self = this,key = null,next = 1,callback = this.redis.callback;
        if(typeof arguments[next] !== 'function'){
            key = arguments[next];
            next++;
        }
        if(typeof arguments[next] === 'function') {
            callback = arguments[next]
        }
        if( id===null ){
            return this.mongodb.get(id,key,callback);
        }
        else if( Array.isArray(id) ){
            return mget.call(this,id,key,callback);
        }

        this.redis.get(id,key,function(err,ret){
            if(err){
                return callback(err,ret);
            }
            else if(!ret){
                getDataFromMongodb.call(self,id,key,callback);
            }
            else{
                return callback(null,ret);
            }
        });
    }
//id,key,[val,callback]
    set(id,key) {
        var self = this,val = null,next = 2,callback=this.redis.callback;
        if(typeof arguments[next] !== 'function'){
            val = arguments[next];
            next++;
        }
        if(typeof arguments[next] === 'function') {
            callback = arguments[next]
        }
        var result = function(err,ret){
            if(!err){
                self.mongodb.set(id,key,val,callback);
            }
            else {
                callback(err, ret);
            }
        }
        if( typeof id == 'object'){
            return callback('error','MRCache.set arguments[id] typeof illegal');
        }
        this.redis.exist(id,function(err,ret){
            if(err || !ret){
                self.mongodb.set(id,key,val,callback);
            }
            else {
                self.redis.set(id, key, val, result);
            }
        })

    }


    del(ids) {
        var self = this,key = null,next = 1,callback=this.redis.callback;
        if(typeof arguments[next] !== 'function'){
            key = arguments[next];
            next++;
        }
        if(typeof arguments[next] === 'function') {
            callback = arguments[next]
        }
        
        var DBDelResult = function(err,ret){
            if(err){
                return callback(err,ret);
            }
            self.redis.del(ids,key,callback);
        }
        if(!key){
            this.mongodb.remove(ids,DBDelResult);
        }
        else{
            this.mongodb.unset(ids,key,DBDelResult);
        }
    }
    //data,[option],callback,[ErrorReNum]
    add(data) {
        var self = this,callback = arguments[1] || this.redis.callback;
        if(!data['_id']){
            data['_id'] = this.mongodb.ObjectID();
        }
        var id = data['_id'].toString();
        this.mongodb.insert(data,function(err,ret){
            if(!err){
                addDataToRedis.call(self,id,data);
            }
            callback(err,ret);
        });
    }


    incr(id, key) {
        var val = null,next = 2,callback=this.redis.callback;
        if(typeof arguments[next] !== 'function'){
            val = arguments[next];
            next++;
        }
        if(typeof arguments[next] === 'function') {
            callback = arguments[next]
        }
        var result = function (err,ret){
            if(!err){
                this.mongodb.set(id,key,ret);
            }
            return callback(err, ret);
        }
        if( typeof id == 'object'){
            return callback('error','MRCache.set arguments[id] typeof illegal');
        }
        this.redis.exist(id,(err,ret)=>{
            if(err){
                return callback(err,ret);
            }
            else if(ret){
                var resultBind = result.bind(this);
                this.redis.incr(id, key, val, resultBind);
            }
            else {
                var query = this.mongodb.query(id);
                var update = {"$inc":this.mongodb.values(key,val)};
                var option = {fields:this.mongodb.fields(key),multi:false};
                this.mongodb.update(query,update,option,callback);
            }
        })
    }

    page(){
        return this.mongodb.page.apply(this.mongodb,arguments);
    }

    insert(){
        this.add.apply(this,arguments);
    }
}

function mget(ids,key,callback){
    if(ids.length > this.limit ){
        var options = {'dataType':'json'};
        return this.mongodb.get(id,key,options,callback);
    }
    var data = {'rows':{},'arr':[],'key':key,'callback':callback};
    var worker = mget_worker.bind(this,data);
    var result = mget_result.bind(this,data);
    var mgetTask = new cosjs_task(ids,worker,result);
    mgetTask.breakOnError = true;
    mgetTask.start();
}

function mget_worker(data,id,callback){
    this.redis.get(id,data['key'],function(err,ret){
        if(err){
            return callback(err,ret);
        }
        if(!ret){
            data['arr'].push(id);
        }
        else{
            data['rows'][id] = ret;
        }
        return callback(null);
    });
}

function mget_result(data,err,ret){
    var callback = data['callback'];
    if(err){
        return callback(ret[0]);
    }
    else if(data['arr'].length ==0){
        return callback(null,data['rows']);
    }
    getDataFromMongodb.call(this,data['arr'],data['key'], (e,r)=>{
        if(e) {
            return callback(e,r);
        }
        if(ret){
            mergeResult(data['rows'],r,data['key']);
        }
        return callback(null,data['rows']);
    });
}


function mergeResult(rows,ret,keys){
    if(!keys){
        Object.assign(rows,ret);
    }
    var arr = Array.isArray(keys) ? keys : [keys];
    for(var k in ret){
        var v = {};
        for(var key of keys){
            if(key in ret[k]){
                v[key] = ret[k][key];
            }
        }
        rows[k] = v;
    }

}


function addDataToRedis(id,key,val) {
    this.redis.set(id,key,val,(err,ret)=>{
        if(!err && this.expire){
            this.redis.expire(id,this.expire);
        }
    });
}

function getDataFromMongodb(id,keys,callback){
    var options = {'dataType':'json','dataParse':addDataToRedis.bind(this)};
    this.mongodb.get(id,null,options,callback);
}