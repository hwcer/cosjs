"use strict";
const cosjs_client  = require('../library/client');
const cosjs_socket  = require('../library/socket');
const cosjs_manager = require('../library/manager');
const cosjs_library = require('cosjs.library');

exports = module.exports = function(opts){
    opts.key = opts.key ? opts.key : [opts.host,opts.port].join(':');
    opts.online = 0;

    var handle = [this.root, opts['handle'] || 'handle'].join('/');
    var remote = [this.root, opts['remote'] || 'remote'].join('/');
    var application = cosjs_socket(handle,opts);

    application.model  = new Map();
    application.worker = new Map();
    
    application.on('connection', function (socket) {
        opts.online ++;
        socket.on('disconnect', function (){ opts.online --; });
    });


    if(!this.manager){
        return application;
    }
    //连接manager
    var manager = cosjs_manager(this.manager);
    application.defineHandlePrototype('manager',manager);

    //同步在线人数
    if(opts.refresh ) {
        setInterval(function () {
            manager.emit('connector', opts);
        }, opts.refresh || 1000);
    }
    //监听工作进程
    for(let k of this.model){
        var model = worker_handle(k,application);
        application.model.set(k,model);
        application.defineHandlePrototype(k, model);
        manager.on(k,function($opts){
            worker_define.call(application,remote,k,$opts);
        });
    };
    return application;
};

function worker_define(remote,name,opts){
    var key = opts.key;
    if(this.worker.has(key) || !this.model.has(name)){
        return ;
    }
    var model = this.model.get(name);
    var worker = cosjs_client(remote,opts,this);
    register.call(model,key,worker);
}

function worker_handle(model,app){
    if (!(this instanceof worker_handle)) {
        return new worker_handle(model,app);
    }
    this.app = app;
    this.model = model;
    this.worker = new Set();
    this._broadcast = false;
}

//随机发布
worker_handle.prototype.emit = function(event){
    if(this._broadcast){
        this._broadcast = 'emit';
        return broadcast.apply(this,arguments);
    }
    var worker = this.worker();
    if(!worker){
        return false;
    }
    worker.emit.apply(worker,arguments);
}
//随机发布
worker_handle.prototype.send = function(event){
    if(this._broadcast){
        this._broadcast = 'send';
        return broadcast.apply(this,arguments);
    }
    var worker = this.worker();
    if(!worker){
        return false;
    }
    worker.send.apply(worker,arguments);
}


worker_handle.prototype.worker = function(key){
    if(!key){
        key = this.random();
    }
    if(!key){
        return null;
    }
    return this.app.worker.get(key);
}

//随机获取worker key
worker_handle.prototype.random = function(){
    var size = this.worker.size;
    if(!size){
        return null;
    }
    var random = cosjs_library('random');
    var i = random.roll(0,size - 1);
    var values = this.worker.values();
    return values[i];
}

//广播频道
worker_handle.prototype.broadcast = function(){
    this._broadcast = true;
    return this;
}


function register(key,worker){
    var self = this;
    this.worker.add(key);
    this.app.worker.set(key , worker);
    worker.on('disconnect',function(){
        destroy.call(self,key);
    });
}

function destroy(key){
    this.worker.delete(key);
    this.app.worker.delete(key);
}

function broadcast(){
    var act = this._broadcast;
    this._broadcast = false;
    var args = arguments;
    for(let key of this.worker){
        var worker = this.app.worker.get(key);
        if(worker){
            worker[act].apply(worker,args);
        }
    };
}