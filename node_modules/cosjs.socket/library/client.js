"use strict";
//spirit 存在于每个工作进程负责与master通信
const cosjs_loader     = require('cosjs.loader');
const socket_client    = require('socket.io-client');

exports = module.exports =  function cosjs_client(root,opts,app){
    var protocol = opts['protocol'] || 'ws://';
    var url = protocol + ( [opts.host,opts.port].join(':') );
    opts['reconnection'] = true;

    var socket = socket_client(url,opts);
    var handle = handle_prototype(app,socket);
    var loader = root ? cosjs_loader(root) : null;
    
    socket.on('message', function (name,data) {
        var arr = Array.from(arguments);
        arr.unshift(loader);
        handle_call.apply(handle,arr);
    });

    socket.on('error', function(){
        //console.log('spirit error',arguments);
    });
    socket.on('connection', function(){
        //console.log('spirit connection:',arguments);
    });
    socket.on('disconnect', function(){
        //console.log('spirit disconnect');
    });

    socket.on('reconnect', function(transport_type,reconnectionAttempts){
    });

    return socket;
};


//handle加载器,/test/ , /test/index
function handle_call(){
    var arr = Array.from(arguments);
    var loader = arr.shift(),name = arr.shift();
    if(!loader) return;
    var method = loader.parse(name);
    if( typeof method != 'function'  ){
        return false;
    }
    method.apply(this, arr);
};


function handle_prototype(app,socket){
    if (!(this instanceof handle_prototype)) {
        return new handle_prototype(app,socket);
    }
    this.app = app;
    this.socket   = socket;
};
