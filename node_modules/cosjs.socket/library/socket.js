"use strict";
//agent启动脚本
const library  = require('cosjs.library');

//connector
exports = module.exports = function socket_server(opts){
    var port = opts.port;
    opts['online'] = 0;
    var app = require('socket.io')(port,opts);
    var loader = opts.root ? library('loader')(opts.root) : null;
    app.serveClient(false);
    app.on('connection', function (socket) {
        opts['online'] ++;
        var socket_handle = handle_prototype(app,socket);
        var handle_call_bind = handle_call.bind(socket_handle,loader);
        socket.on('message', handle_call_bind);
        socket.on('error', function (){});
        socket.on('disconnect', function (){ opts['online'] -- ;});
    });

    app.emitter = function(setting){
        var emitter = library("emitter")(setting,app);
        app.defineHandlePrototype('emitter',emitter);
        if(opts['refresh']){
            setInterval(function(){
                emitter.emit('connector',{host:opts.host,port:opts.port,maxClient:opts.maxClient,online:opts.online});
            },opts['refresh']);
        }
        app.publish   = emitter.publish.bind(emitter);
        app.subscribe = emitter.subscribe.bind(emitter);
    }

    app.defineHandlePrototype  = defineHandlePrototype;


    return app;
};



//handle加载器,/test/ , /test/index
function handle_call(loader,name){
    if(!loader) {
        return ;
    }
    if(name.indexOf('/')<0){
        name = ['',name,''].join('/');
    }
    var arr = Array.prototype.slice.call(arguments,2);
    var method = loader.parse(name);
    if( typeof method != 'function'  ){
        return false;
    }
    method.apply(this, arr);
};



function handle_prototype(app,socket){
    if (!(this instanceof handle_prototype)) {
        return new handle_prototype(app,socket);
    }
    this.app       = app;
    this.socket    = socket;
};

function defineHandlePrototype(name,value){
    if(typeof name == 'object'){
        for(var k in name){
            defineHandlePrototype(k,name[k]);
        }
    }
    else{
        handle_prototype.prototype[name] = value;
    }
}
