"use strict";
//agent启动脚本
const socket_io     = require('socket.io');
const cosjs_library  = require('cosjs.library');
const cosjs_loader = cosjs_library('loader');

//connector
exports = module.exports = function socket_server(root,opts){
    var app = socket_io(opts.port,opts||null);
    var loader = root ? cosjs_loader(root) : null;
    app.serveClient(false);
    app.on('connection', function (socket) {
        var socket_handle = handle_prototype(app,socket);
        socket.on('message', function (name,data) {
            var arr = Array.from(arguments);
            arr.unshift(loader);
            handle_call.apply(socket_handle,arr);
        });
        socket.on('error', function (){

        });
        socket.on('disconnect', function (){
        });
    });
    app.defineHandlePrototype  = defineHandlePrototype;
    return app;
};



//handle加载器,/test/ , /test/index
function handle_call(){
    var arr = Array.from(arguments);
    var loader = arr.shift(),name = arr.shift();
    if(!loader) return ;
    var method = loader.parse(name);
    if( typeof method != 'function'  ){
        return false;
    }
    method.apply(this, arr);
};



function handle_prototype(app,socket){
    if (!(this instanceof handle_prototype)) {
        return new handle_prototype(app,socket);
    }
    this.app       = app;
    this.socket    = socket;
};


handle_prototype.prototype.join = function(){
    var name = getRoomName.apply(this,arguments);
    if(!name){
        return false;
    }
    return this.socket.join(name);
};

handle_prototype.prototype.leave = function(){
    var name = getRoomName.apply(this,arguments);
    if(!name){
        return false;
    }
    return this.socket.leave(name) ;
};
//获取一个频道
handle_prototype.prototype.broadcast = function(){
    var name = getRoomName.apply(this,arguments);
    return name ? this.app.sockets.to(name) : this.app;
}

function getRoomName(){
    if(arguments.length == 0){
        return null;
    }
    else if(arguments.length==1){
        return arguments[0]
    }
    else{
        return Array.from(arguments).join('-');
    }
};


function defineHandlePrototype(name,value){
    if(typeof name == 'object'){
        for(var k in name){
            defineHandlePrototype(k,name[k]);
        }
    }
    else{
        handle_prototype.prototype[name] = value;
    }
}