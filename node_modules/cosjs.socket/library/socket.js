"use strict";
//agent启动脚本
const library  = require('cosjs.library');

//connector
exports = module.exports = function socket_server(root,opts,emitter,refresh){
    var app = require('socket.io')(opts.port,opts);
    var handle = [root,opts.handle||'handle'].join('/');
    var trigger = null;
    app.key = opts['key'] || library('ip').encode(opts);
    app.online = 0;
    app.loader = library('loader')(handle);
    app.trigger = function(){  if(app.loader) { trigger = app.loader.handle();  }  }
    app.serveClient(false);
    app.on('connection', function (socket) {
        app.online ++;
        var socket_handle = handle_prototype(app,socket);
        socket.on('error', function (){});
        socket.on('message', handle_call.bind(socket_handle));
        socket.on('disconnect', function (){ app.online -- ;});
        if(trigger){
            for(var event of trigger){
                socket.on(event, handle_call.bind(socket_handle,event));
            }
        }
    });

    app.defineHandlePrototype  = defineHandlePrototype;

    if(emitter){
        if ( emitter instanceof (library("emitter"))) {
            app.emitter = emitter;
        }
        else{
            var remote = [root,opts.remote||'remote'].join('/');
            app.emitter = library("emitter")(Object.assign({},emitter,{root:remote}),app);
        }
        app.defineHandlePrototype('emitter',app.emitter);
    }


    if( refresh && app.emitter ){
        setInterval(function(){
            app.emitter.emit(refresh.name,{key:app.key,host:opts.host,port:opts.port,maxClient:opts.maxClient,online:app.online},1);
        },refresh.time);
    }

    return app;
};

//handle加载器,/test/ , /test/index
function handle_call(name){
    if(!this.app.loader) {
        return ;
    }
    if(name.indexOf('/')<0){
        name = ['',name,''].join('/');
    }
    var arr = Array.prototype.slice.call(arguments,1);
    var method = this.app.loader.parse(name);
    if( typeof method != 'function'  ){
        return false;
    }
    method.apply(this, arr);
};



function handle_prototype(app,socket){
    if (!(this instanceof handle_prototype)) {
        return new handle_prototype(app,socket);
    }
    this.app       = app;
    this.socket    = socket;
};

function defineHandlePrototype(name,value){
    if(typeof name == 'object'){
        for(var k in name){
            defineHandlePrototype(k,name[k]);
        }
    }
    else{
        handle_prototype.prototype[name] = value;
    }
}
